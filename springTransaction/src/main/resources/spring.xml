<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--引入数据库连接属性配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath*:database.properties"/>
    </bean>

    <!--配置数据库-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!--配置jdbc-template-->
    <bean id="jdbc-template" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--配置JDBC事务管理器-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--事务模板-->
    <!--注释模式事务：启动使用注解实现声明式事务管理的支持-->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!--想创建的服务对象：this is the service object that we want to make transactional-->
    <!--BookService这个Bean使用了 tx拦截器-声明式事务管理-->
    <bean id="bookService" class="com.lvjing.service.BookService"/>
    <!--CarService这个Bean使用了 全注释（注解）-声明式事务管理-->
    <bean id="carService" class="com.lvjing.service.CarService"/>

    <!--通过事务通知的模式实现事务
    事务通知：the transactional advice (what 'happens';see the <aop:advisor/> bean below)-->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!--the transactional semantics...-->
        <tx:attributes>
            <!--以find开头的所有方法都为只读事务：all methods starting with 'find' are read-only-->
            <tx:method name="find" read-only="true"/>
            <!--其它方法使用默认事务设置：other methods use the default transaction settings(see below)-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--确保以上事务通知对定义在bookService接口中的方法都其作用(ensure that the above transactional
    advice runs for any execution of an operation defined by the bookService interface)-->
    <aop:config>
        <aop:pointcut id="bookServiceOperation" expression="execution(* com.lvjing.service.BookService.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="bookServiceOperation"/>
    </aop:config>

</beans>